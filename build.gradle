plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://maven.wispforest.io' }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://api.modrinth.com/maven"
		content {includeGroup "maven.modrinth"}
	}
	maven { url 'https://ladysnake.jfrog.io/artifactory/mods' }
	maven { url 'https://maven.cafeteria.dev'
		content {includeGroup 'net.adriantodt.fabricmc'}
	}
	maven { url "https://maven.jamieswhiteshirt.com/libs-release"
		content {includeGroup "com.jamieswhiteshirt"}
	}
	maven { url "https://jitpack.io" }
	maven { url "https://maven.shedaniel.me/" }

	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}
	mavenLocal()
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include "io.wispforest:owo-sentinel:${project.owo_version}"
	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")

	modApi("com.github.Virtuoel:Pehkui:${pehkui_version}", { exclude group: "net.fabricmc.fabric-api" })

	modLocalRuntime modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
	modImplementation "com.github.apace100:origins-fabric:${project.origin_version}"
	modImplementation "dev.emi:trinkets:${trinkets_version}"

	include "io.github.ladysnake:satin:${satin_version}"
	modImplementation "io.github.ladysnake:satin:${satin_version}"

	modCompileOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cc_version}"
	modCompileOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cc_version}"

	modLocalRuntime "io.wispforest:gadget:${project.gadget_version}"

	//
	include 'com.github.Dansoftowner:jSystemThemeDetector:3.8'

	include 'io.github.g00fy2:versioncompare:1.4.1'
	//

	implementation 'com.github.Dansoftowner:jSystemThemeDetector:3.8'

	include 'org.apache.commons:commons-collections4:4.4'
	implementation 'org.apache.commons:commons-collections4:4.4'

	include 'io.github.earcut4j:earcut4j:2.2.2'
	implementation 'io.github.earcut4j:earcut4j:2.2.2'
}

loom {
	accessWidenerPath = file("src/main/resources/personality.accesswidener")

	runs {

		Integer numberOfRuns = 1;

		try {
			numberOfRuns = Integer.valueOf(project.setsOfRunConfigs);
		} catch(NumberFormatException ignored){}

		for(int i = 1; i <= numberOfRuns; i++) {
			it.create("clientMixinDebug_${i}", {
				client()
				runDir "run_${i}"
				name "Minecraft Client ${i} [Mixin Debug]"
				vmArg "-Dfabric.dli.config=${file(".gradle/loom-cache/launch.cfg").toString()}"
				vmArg "-Dfabric.dli.env=client"
				vmArg "-Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"

				Object runConfig = it

				project.afterEvaluate {
					project.configurations.compileClasspath
							.getAllDependencies()
							.findAll { Dependency test -> test.getName() == "sponge-mixin" }
							.iterator().forEachRemaining {runConfig.vmArg "-javaagent:\"${(project.configurations.compileClasspath.files(it).iterator().next().getPath())}\"" }
				}

				vmArg "-Dowo.renderdocPath=C:\\Program Files\\RenderDoc\\renderdoc.dll"

				vmArg "-Dlog4j.configurationFile=${file(".gradle/loom-cache/log4j.xml").toString()}"
				vmArg "-Dfabric.log.disableAnsi=false"
				vmArg "-Dmixin.debug.export=true"

				ideConfigGenerated = true
			})
		}

		clientRenderDoc {
			client()
			name "Minecraft Client [RenderDoc]"
//			vmArg "-Dfabric.dli.config=${file(".gradle/loom-cache/launch.cfg").toString()}"
//			vmArg "-Dfabric.dli.env=client"
//			vmArg "-Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"

			vmArg "-Dowo.renderdocPath=\"C:\\Program Files\\RenderDoc\\renderdoc.dll\""

			ideConfigGenerated = true
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
